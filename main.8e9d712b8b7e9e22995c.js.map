{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","onSuccess","onError","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GAGV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,YAAW,WACHC,EAAOL,KAGZA,OAKLK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,kCClBXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAWnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAId,SAAQ,SAAAC,GACjBE,YAAW,WACT,IAAMY,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAE3DF,GACFd,EAAQc,KAET,SAGDX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAK7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCjCnC,IAIMe,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCxB,GAL2BuB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAKpD,OAAO,IAAIrB,SAAQ,SAAC0B,EAAWC,GAC7BxB,YAAW,WACUoB,KAAKE,SAAW,IAEjCC,EAAU,CAAEE,GAAIR,EAAYQ,GAAIvB,KAAMP,IAExC6B,EAAQ,CAAEC,GAAIR,EAAYQ,OACzB9B,OAiBD+B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIvB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIyB,EAAW,SAAC,GAAW,IAATF,EAAS,EAATA,GAClBtB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAaFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAE/DX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,K","file":"main.8e9d712b8b7e9e22995c.js","sourcesContent":["const delay = ms => {\r\n    // Твой код\r\n    // const time = logger(time);\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (logger(ms)) {\r\n                resolve;\r\n            }\r\n        }, ms);\r\n    })\r\n    \r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n// const getMessage = function () {\r\n//   const input = prompt('Введите сообщение');\r\n\r\n//   return Promise.resolve(input);\r\n// };\r\n\r\n// const logger = message => console.log(message);\r\n\r\n// getMessage().then(message => logger(message));\r\n\r\n// // Или еще короче\r\n// getMessage().then(logger);","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//   const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user,\r\n//   );\r\n\r\n//   callback(updatedUsers);\r\n// };\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      );\r\n      if (updatedUsers) {\r\n        resolve(updatedUsers);\r\n      }\r\n    }, 1000);\r\n  });\r\n};\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  return new Promise((onSuccess, onError) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        onSuccess({ id: transaction.id, time: delay });\r\n      }\r\n      onError({ id: transaction.id });\r\n    }, delay);\r\n  });\r\n};\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//     const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//     setTimeout(() => {\r\n//         const canProcess = Math.random() > 0.3;\r\n\r\n//         if (canProcess) {\r\n//             onSuccess(transaction.id, delay);\r\n//         } else {\r\n//             onError(transaction.id);\r\n//         }\r\n//     }, delay);\r\n// }\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = ({ id }) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}